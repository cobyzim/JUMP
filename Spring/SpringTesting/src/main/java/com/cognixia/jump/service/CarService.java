package com.cognixia.jump.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cognixia.jump.exception.ResourceNotFoundException;
import com.cognixia.jump.model.Car;
import com.cognixia.jump.repository.CarRepository;

@Service
public class CarService {
	
	@Autowired
	CarRepository repo;
	
	public List<Car> getAllCars() {
		
		return repo.findAll();
	}
	
	public Car getCarById(long id) throws ResourceNotFoundException {
		
		Optional<Car> found = repo.findById(id);
		
		if(!found.isPresent()) {
			throw new ResourceNotFoundException("Car with id = " + id + " could not be found.");
		}
		
		return found.get();
	}
	
	public List<Car> getCarsOfType(String type) {
		
		return repo.findByType(type);
	}
	
	public List<Car> getCarsOfMaxMiles(int miles) {
		
		return repo.carsWithMaxMiles(miles);
	}
	
	public Car addCar(Car car) {
		
		// make sure id is negative, so it can be generated by Hibernate
		car.setId(-1L);
		
		// add car to database
		Car saved = repo.save(car);
		
		// return car saved
		return saved;
	}
	
	public Car updateCar(Car car) throws ResourceNotFoundException {
		
		// if car cannot be found based on id, throw exception
		if(!repo.existsById(car.getId())) {
			throw new ResourceNotFoundException("Car with id = " + car.getId() 
				+ " could not be found and cannot be updated.");
		}
		
		// update car in database
		Car updated = repo.save(car);
		
		// return car updated
		return updated;
	}
	
	public Car deleteCar(long id) throws ResourceNotFoundException {
		
		// find car to delete, if not found, will throw exception
		Car toDelete = getCarById(id);
		
		// delete car
		repo.deleteById(id);
		
		// return car deleted
		return toDelete;
	}

}
